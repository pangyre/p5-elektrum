=pod

=encoding utf-8

=head1 Name

Elektrum::Doc::Specification - ...

=head1 API – Routes

=head2 Home

=head3 /

Home page, whatever that will mean.

=head2 Grab-bag

=head3 /sitemap

XML, gzipped, cached.

=head3 /sitemap.xml

Forwards to L</sitemap>.

=head3 /referer

Like the Yesh 1.0/Sedition·com implementation.

=head3 /referer/cloud

=head3 /doc/{resource}

View these docs.

=head3 /dav

L<Net::DAV::Server> based interface to the root tree.

=head3 /chat

Anonymous too.

=head2 Nodes (Articles|Posts|Items|Fragments)

=head3 /n

GET ⇢ List of articles.
POST ⇢ Create an article.
PUT ⇢ Create an article.

=head3 /n/new

Form which posts to C</n>.


=head3 /n/{id}/edit

…

=head3 /n/{id}/preview

Individual view of unpublished node for those with permission.

=head3 /n/{id}

Individual view, including possible follow up comments and discussion.

=head3 /n/{id}/rev

View a list of diffs for a node.

=head3 /n/{id}/rev/{¿guid?}

View a particular diff.

=head3 /n/{id}/preview/{token}

Individual view of unpublished node by rules associated with token; e.g. timespan, no edits, IP.

=head3 /n/random

Visit random node.

=head3 /n/tag/{tag};{tag};{tag}

List view of articles by tag(s).

=head3 /n/tag/{tag};{tag}/random

Visit random node from tag list.

=head3 /n/search/{simple query string}

Search the site. Complex terms may be passed in as the param C<q> instead.

=head3 /n/{title}/{id}

Title as integer will clash with ids. Is C<id> enough to disambiguate call?

=head3 /n/{id}/{ct}

Naked view of content type without style. Charset from node. Supported content types–

=over 4

=item * plain ⇢text/plain

=item * view ⇢(no wrapper, pure content of node)

=item * json ⇢application/json

=item * xml ⇢application/xml

=item * atom ⇢application/atom+xml

=back

=head3 /n/{tag};{tag}/xml

Atom of provided tags.

=head2 Error Testing

These functions will only work for those with a site role of tester or if the site is run under debug.

=head3 /error/throw/{error code}

=head2 User

=head3 /user

Index of users? Personal page if signed-in?

=head3 /user/{id}

User view.

=head3 /user/{id}/edit

User settings and preferences.

=head3 /user/confirm/{token}

Confirm a native registration, reset a password, etc, etc, etc.

=head3 /user/login

…

=head3 /user/logout

Clears session.

=head3 /user/{id}/edit

User settings and preferences.

=head2 Meta

=head3 /meta/config/dump

Dump of the context’s configuration.

=head3 /meta/crontab

Not spec’d. Config::Crontab based interface?

=head3 /meta/dump

Experimental, dangerous interface for raw SQL content dumps.

=head3 /meta/inc

Plain text C<%INC> dump.

=head3 /meta/{¿ping?}

Pings alla pingomatic.com.

=head1 Node Content Filtering

Raw nodes are in sites specific free form plain text with extended XML
content. The extended XML elements SHOULD be consumed and transformed
for output in such a way that the final document is a valid version
agnostic HTML fragment.

=over 4

=item * DB record is text with mixed HTML and XML content.

=item * Record is inflated to object viaE<ndash>

=item * HTML::Class-E<gt>new_fragment?

=back

Site plugins are used to extend DTD for content.

=head1 Various Notes

Let's agree that all "time" strings will be UTC YYYYMMDDHHMMSS and YYYYMMDDHHMMSS.MMM where necessary.

=head1 3.0 functionality

=begin html

<a href="https://github.com/pangyre/p5-elektrum">ElektrumPress</a>, current candidate/prototype. What’s the matter? Don’t you get it?

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.6/jquery.min.js"></script>
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.9/jquery-ui.min.js"></script>
<script type="text/javascript">//<![CDATA[
jQuery(function($){
  $("h4 + p").prev().css({cursor:"pointer"})
         .click(function(){ $(" + p", this).slideToggle("fast"); })
         .trigger("click");
  $("h4 + p").prev()
         .dblclick(function(){ $("h4 + p").slideToggle("fast"); });
});
//]]> </script>

=end html

Status: draft, deleted, publish; how does this jibe with scheduling and display targets?
Type: article, fragment, asset, comment; with this simple approach nodes can serve any purpose.

Should be some way to extend this so that nodes can serve… Or perhaps the same as the FTL model. No titles at all. Everything is just content. Same side issues though… just conceptually cleaner.

Most resources can take xml suffix for an Atom feed.

=head3 /meta/niceuri

GET ⇢ Nice URI index.

POST ⇢ new nice URI; redirects to C</meta/niceuri/{string}>.

=head3 /meta/niceuri/{string}

View/edit a nice URI; should validate it’s allowed by checking actions against it.

=begin html

<h3>Authentication realms</h3>

OpenID
Native with Eks,Bcrypt


<h2>New features from 2.0</h2>

<h4>Content</h4>
<ul>
<li>As much in place editing as possible; sensible.</li>
<li>Application dumping of static files on demand, like a 404 page to plug into a web engine.</li>
<li>Arbitrary, autocomplete tagging of articles.</li>
<li>Token preview URIs so that previews may be shared.</li>
<li>Insert table of contents checkbox for view. Parses major tags and perhaps takes a setting for how deep to go.</li>
</ul>

<h3>Monetization</h3>

Look into needs for DoubleClick and BlogAds and cater to it.
http://web.blogads.com/publisher_html

<h3>Multi-author</h3>

<h3>Meta features to add/formalize</h3>

<ul>
<li>Pod viewer and perldoc interface.</li>
<li>Machine introspection.</li>
<li>Deployment with <a href="http://search.cpan.org/perldoc?Starman">Starman</a> or similar tool with web interface.</li>
</ul>

<h2>Static issues…</h2>

<ul>
<li>Error docs.</li>
<li><var>cross-domain.xml</var></li>
<li><var>favicon.ic</var>.</li>
<li>1x1 gif instructions for most servers and optimization where not possible?</li>

</ul>

<h2>508</h2>

<h2>Deployment</h2>

<ul>
<li>Starman could be self-HUPing… How to sanity check that you’re not about to crash your server?</li>
</ul>

Edit links have token so that you can pop a “This {node} has been edited since you came from this link. Perhaps you should view it to see its current state.”

<h2>Functional notes</h2>

<ul>
<li>Display name is not unique; this is necessary because the origin of the account can vary and because it’s just reality. Names are duplicated. Local usernames can be constrained.</li>
<li>Usernames are not allowed to be purely numeric; this affords <var>/user/{name|id}</var>.</li>
<li>Cache clearance should cascade for related nodes.</li>
</ul>

/user/register

Form to create or associate account.
Supported account creation–
<ul>
<li>Native.</li>
<li>OpenID.</li>
<li>…?</li>
</ul>

=end html



=cut

dl.routeMap dt {
}

dl.routeMap dd {
}

dl.routeMap dt.defunct,
dl.routeMap dt.defunct + dd,
dl.routeMap dt.defunct + dd + dd,
dl.routeMap dt.defunct + dd + dd + dd {

}
